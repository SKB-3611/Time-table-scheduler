generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) // Use UUID for PostgreSQL
  name     String
  role     Role
  username String @unique // Add uniqueness constraint for username
  password String
}



model Slot {
  id          String    @id @default(uuid()) // Use UUID for PostgreSQL
  teacher     String
  start_time  String
  end_time    String
  subject     String
  room        String
  timeTableId String // Foreign key reference to TimeTable
  timeTable   TimeTable @relation(fields: [timeTableId], references: [day], onDelete: Cascade)
}

model TimeTable {
  day   String @id // Use day as the primary key
  slots Slot[] @relation // Relation to Slot model
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}
model Teacher {
  id             String         @id @default(uuid())
  name           String
  role           Role
  username       String         @unique
  password       String
  subjects       String[]
  isAvailable    Boolean        @default(false)
  replacementLog ReplacementLog[]  @relation
}

model ReplacementLog {
  id                 String           @id @default(uuid())
  originalTeacher    String
  replacementTeacher String
  replacementSlots   ReplacementSlot[]
  teacher            Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId          String            @unique
}

model ReplacementSlot {
  id                 String         @id @default(uuid())
  originalTeacher    String
  replacementTeacher String
  subject            String
  room               String
  startTime          String
  endTime            String
  replacementLog     ReplacementLog @relation(fields: [replacementLogId], references: [id])
  replacementLogId   String
}
